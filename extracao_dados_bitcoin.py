# -*- coding: utf-8 -*-
"""Extracao_dados_bitcoin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Vk6AfXZKwM_iJKqZy609d-uxK9c1Wb3
"""

from google.colab import drive
drive.mount('/content/drive')

import os
pasta_de_trabalho = '/content/drive/My Drive/bitcoin_extracao'
if not os.path.isdir(pasta_de_trabalho):
  os.mkdir(pasta_de_trabalho)
os.chdir(pasta_de_trabalho)

!pip install coinbase

api_key =  ''
api_secret = ''

from coinbase.wallet.client import Client
client = Client(api_key, api_secret)

import datetime

def price_bitcoin_in_day(date_search):
    return float((client.get_spot_price(currency_pair='BTC-BRL', date=date_search)).amount)

import pandas as pd
#days = quantidade de dias pesquisados
def data_bitcoin_price_in_days(days):
  # A primeira data pesquisada é hoje(5 de dezembro de 2020)
  date_search = datetime.date.today() 
  
  #price é o preço em reais encontrado.
  price = price_bitcoin_in_day(date_search)
  #criando a lista com os primeiros valores 
  data = [{'Data': date_search, 'Preço': price}]
  # inteirando a quantidade de dias a ser pesquisado
  for i in range(1, days):    
      print(i)  
     # Data do dia anterior
      date_search = date_search - datetime.timedelta(days=1)
     #  Pesquisando o preço...
      price = price_bitcoin_in_day(date_search)
      #Adicionado os novos valores pesquisados e suas datas a lista
      data = data + [{'Data' : date_search, 'Preço' : price}] 
  return data
    
#retornado a lista completa

dados = data_bitcoin_price_in_days(1460)
#pegando dados de 4 anos atrás

df_dados = pd.DataFrame(dados)

#salvando os dados e exportando para xlsx
df_dados.to_excel('/content/drive/MyDrive/bitcoin_extracao/bitcoin_extracao.xlsx', index = False)
df_dados

"""### Criando um modelo preditivo

"""

!pip install fbprophet

from fbprophet import Prophet

df_dados.rename(columns = {'Data':'ds', 'Preço':'y' }, inplace = True)

m = Prophet(changepoint_prior_scale=0.15, daily_seasonality=True)
m.fit(df_dados)

future = m.make_future_dataframe(periods=30)
future.tail()

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

from fbprophet.plot import plot_plotly, plot_components_plotly
plot_plotly(m, forecast)